---
title: Setup instructions
execute: 
  cache: true
  freeze: true

---


The Unix shell has been around longer than most of its users have been alive. It has survived because itâ€™s a powerful tool that allows users to perform complex and powerful tasks, often with just a few keystrokes or lines of code. It helps users automate repetitive tasks and easily combine smaller tasks into larger, more powerful workflows.

Use of the shell is fundamental to a wide range of advanced computing tasks, including high-performance computing. These lessons will introduce you to this powerful tool.



## Download files

You need to download some files to follow this lesson.

1. Download [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip) and move the file to your Desktop.
2. Unzip/extract the file.
  You should end up with a new folder called **`shell-lesson-data`** on your Desktop.

## Open (or install) a shell

:::{.infobox}
::::{.infobox-header}
Where to type commands: How to open a new shell
::::
::::{.exercise-container}

The shell is a program that enables us to send commands to the computer and receive output.
It is also referred to as the terminal or command line.

Some computers include a default Unix Shell program.
The steps below describe some methods for identifying and opening
a Unix Shell program if you already have one installed.
There are also options for identifying and downloading a Unix Shell program,
a Linux/UNIX emulator, or a program to access a Unix Shell on a server.

If none of the options below address your circumstances,
try an online search for: Unix shell [your computer model] [your operating system].

::: {.panel-tabset}

### Windows {#windows}

Computers with Windows operating systems do not automatically have a Unix Shell program
installed.
In this lesson, we encourage you to use an emulator included in [Git for Windows](https://carpentries.github.io/workshop-template/install_instructions/#shell),
which gives you access to both Bash shell commands and Git.

Once installed, you can open a terminal by running the program Git Bash from the Windows start
menu.

**For advanced users:**

As an alternative to Git for Windows you may wish to [Install the Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/install)
which gives access to a Bash shell command-line tool in Windows 10 and above.

Please note that commands in the Windows Subsystem for Linux (WSL) may differ slightly
from those shown in the lesson or presented in the workshop.

### MacOS {#macos}

For a Mac computer running macOS Mojave or earlier releases, the default Unix Shell is Bash.
For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh.
Your default shell is available via the Terminal program within your Utilities folder.

To open Terminal, try one or both of the following:

- In Finder, select the Go menu, then select Utilities.
  Locate Terminal in the Utilities folder and open it.
- Use the Mac 'Spotlight' computer search function.
  Search for: `Terminal` and press <kbd>Return</kbd>.

To check if your machine is set up to use something other than Bash,
type `echo $SHELL` in your terminal window.

If your machine is set up to use something other than Bash,
you can run it by opening a terminal and typing `bash`.

[How to Use Terminal on a Mac](https://www.macworld.co.uk/feature/mac-software/how-use-terminal-on-mac-3608274/)

### Linux {#linux}

The default Unix Shell for Linux operating systems is usually Bash.
On most versions of Linux, it is accessible by running the
[Gnome Terminal](https://help.gnome.org/users/gnome-terminal/stable/) or [KDE Konsole](https://konsole.kde.org/) or [xterm](https://en.wikipedia.org/wiki/Xterm),
which can be found via the applications menu or the search bar.
If your machine is set up to use something other than Bash,
you can run it by opening a terminal and typing `bash`.

:::
::::
:::

After installing the software

3. Open a terminal.
  If you're not sure how to open a terminal on your operating system, see the instructions below.
4. In the terminal type `cd` then press the <kbd>Return</kbd> key.
  This step will make sure you start with your home folder as your working directory.

In the lesson, you will find out how to access the data files in this folder.


## Create SSH keys

#### SSH Keys on Linux, Mac, MobaXterm, and Windows Subsystem for Linux

Once you have opened a terminal, check for existing SSH keys and filenames
since existing SSH keys are overwritten.

```bash
{{< var site.localprompt >}} ls ~/.ssh/
```

If `~/.ssh/id_ed25519` already exists, you will need to specify
a different name for the new key-pair.

Generate a new public-private key pair using the following command, which will
produce a stronger key than the `ssh-keygen` default by invoking these flags:

* `-a` (default is 16): number of rounds of passphrase derivation; increase to
  slow down brute force attacks.
* `-t` (default is [rsa](https://en.wikipedia.org/wiki/RSA_(cryptosystem))): specify the "type" or cryptographic
  algorithm. `ed25519` specifies [EdDSA](https://en.wikipedia.org/wiki/EdDSA) with a 256-bit key;
  it is faster than RSA with a comparable strength.
* `-f` (default is /home/user/.ssh/id_algorithm): filename to store your
  private key. The public key filename will be identical, with a `.pub`
  extension added.

```bash
{{< var site.localprompt >}} ssh-keygen -a 100 -f ~/.ssh/id_ed25519 -t ed25519
```

When prompted, enter a strong password with the
[above considerations in mind](#considerations-for-ssh-key-passwords).
Note that the terminal will not appear to change while you type the password:
this is deliberate, for your security. You will be prompted to type it again,
so don't worry too much about typos.

:::{.infobox}
::::{.infobox-header}
Considerations for SSH Key Passwords
::::
::::{.exercise-container}

When prompted, enter a strong password that you will remember. There are two common approaches to this:

1. Create a memorable passphrase with some punctuation and number-for-letter substitutions, 32 characters or longer. Street addresses work well; just be careful of social engineering or public records attacks.
2. Use a password manager and its built-in password generator with all character classes, 25 characters or longer. [KeePass](https://keepass.info/) and [BitWarden](https://bitwarden.com/) are two good options.
3. Nothing is _less_ secure than a private key with no password. If you skipped password entry by accident, go back and generate a new key pair _with_ a strong password.

::::
:::


Take a look in `~/.ssh` (use `ls ~/.ssh`). You should see two new files:

* your private key (`~/.ssh/id_ed25519`): _do not share with anyone!_
* the shareable public key (`~/.ssh/id_ed25519.pub`): if a system administrator
  asks for a key, this is the one to send. It is also safe to upload to
  websites such as GitHub: it is meant to be seen.

### SSH Agent for Easier Key Handling

An SSH key is only as strong as the password used to unlock it, but on the
other hand, typing out a complex password every time you connect to a machine
is tedious and gets old very fast. This is where the [SSH Agent][ssh-agent]
comes in.

Using an SSH Agent, you can type your password for the private key once, then
have the Agent remember it for some number of hours or until you log off.
Unless some nefarious actor has physical access to your machine, this keeps the
password safe, and removes the tedium of entering the password multiple times.

Just remember your password, because once it expires in the Agent, you have to
type it in again.

#### SSH Agents on Linux, macOS, and Windows

Open your terminal application and check if an agent is running:

```bash
{{< var site.localprompt >}} ssh-add -l
```

* If you get an error like this one,

  ```output
  Error connecting to agent: No such file or directory
  ```

or,


  ```output
  Could not open a connection to your authentication agent.
  ```


  ... then you need to launch the agent as follows:

  ```bash
  {{< var site.localprompt >}} eval $(ssh-agent)
  ```
  
* Otherwise, your agent is already running: don't mess with it.

Add your key to the agent, with session expiration after 8 hours:

```bash
{{< var site.localprompt >}} ssh-add -t 8h ~/.ssh/id_ed25519
```

```output
Enter passphrase for .ssh/id_ed25519: 
Identity added: .ssh/id_ed25519
Lifetime set to 86400 seconds
```


For the duration (8 hours), whenever you use that key, the SSH Agent will
provide the key on your behalf without you having to type a single keystroke.
